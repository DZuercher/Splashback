# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_splashback', [dirname(__file__)])
        except ImportError:
            import _splashback
            return _splashback
        if fp is not None:
            try:
                _mod = imp.load_module('_splashback', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _splashback = swig_import_helper()
    del swig_import_helper
else:
    import _splashback
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class dp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dp, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _splashback.new_dp()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _splashback.delete_dp
    __del__ = lambda self : None;
    def assign(self, *args, **kwargs): return _splashback.dp_assign(self, *args, **kwargs)
    def value(self): return _splashback.dp_value(self)
    def cast(self): return _splashback.dp_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _splashback.dp_frompointer
    if _newclass:frompointer = staticmethod(_splashback.dp_frompointer)
dp_swigregister = _splashback.dp_swigregister
dp_swigregister(dp)

def dp_frompointer(*args, **kwargs):
  return _splashback.dp_frompointer(*args, **kwargs)
dp_frompointer = _splashback.dp_frompointer

class splashback(_object):
    """Proxy of C++ splashback class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, splashback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, splashback, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tree"] = _splashback.splashback_tree_set
    __swig_getmethods__["tree"] = _splashback.splashback_tree_get
    if _newclass:tree = _swig_property(_splashback.splashback_tree_get, _splashback.splashback_tree_set)
    def __init__(self, xrmin=0.5, xrmax=15.0, xrbins=15, xoutfile="Debug.dat", xmag_limit=25.0, zmax=0.5, 
    Njack=25, deproject=False, colored=0, verbose=False): 
        """
        __init__(splashback self, float xrmin=0.5, float xrmax=15.0, int xrbins=15, char * xoutfile="Debug.dat", float xmag_limit=25.0, 
            float zmax=0.5, int Njack=25, bool deproject=False, int colored=0, 
            bool verbose=False) -> splashback
        """
        this = _splashback.new_splashback(xrmin, xrmax, xrbins, xoutfile, xmag_limit, zmax, Njack, deproject, colored, verbose)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _splashback.delete_splashback
    __del__ = lambda self : None;
    def allocate_lens_memory(self, *args, **kwargs):
        """allocate_lens_memory(splashback self, int xNcen) -> int"""
        return _splashback.splashback_allocate_lens_memory(self, *args, **kwargs)

    def process_lens(self, *args, **kwargs):
        """process_lens(splashback self, float xra, float xdec, float xzred, int xjackreg, float wt=1.0) -> int"""
        return _splashback.splashback_process_lens(self, *args, **kwargs)

    def finalize_lenses(self):
        """finalize_lenses(splashback self) -> int"""
        return _splashback.splashback_finalize_lenses(self)

    def process_source(self, *args, **kwargs):
        """process_source(splashback self, float sra, float sdec, float smag, bool disable_magcheck, float color=1.E30) -> int"""
        return _splashback.splashback_process_source(self, *args, **kwargs)

    def finalize_results(self, writeok=False):
        """finalize_results(splashback self, bool writeok=False) -> int"""
        return _splashback.splashback_finalize_results(self, writeok)

    def test_searchrecord(self):
        """test_searchrecord(splashback self) -> int"""
        return _splashback.splashback_test_searchrecord(self)

    def deprojection_kernel(self, *args, **kwargs):
        """deprojection_kernel(splashback self, double x) -> double"""
        return _splashback.splashback_deprojection_kernel(self, *args, **kwargs)

splashback_swigregister = _splashback.splashback_swigregister
splashback_swigregister(splashback)

# This file is compatible with both classic and new-style classes.


